"""
√âtape 1.4 : Transformations de Base
Objectif : Cr√©er les tables STAGING.clean_trips et les tables FINAL selon le brief
"""

import snowflake.connector
from loguru import logger
from dotenv import load_dotenv
import os
from pathlib import Path

load_dotenv()

def create_staging_clean_trips(conn):
    """Cr√©er STAGING.clean_trips avec les filtres du brief"""
    cursor = conn.cursor()
    
    logger.info("üßπ Cr√©ation de STAGING.clean_trips...")
    
    # Lire et ex√©cuter le fichier SQL
    sql_file = Path("SQL/dbt/staging_clean_trips.sql")
    sql_content = sql_file.read_text()
    cursor.execute(sql_content)
    
    # Compter les r√©sultats
    cursor.execute("SELECT COUNT(*) FROM STAGING.clean_trips")
    clean_count = cursor.fetchone()[0]
    
    logger.success(f"‚úÖ STAGING.clean_trips cr√©√©e: {clean_count} lignes")
    return clean_count

def create_final_tables(conn):
    """Cr√©er les tables FINAL selon le brief"""
    cursor = conn.cursor()
    
    logger.info("üìä Cr√©ation des tables FINAL...")
    
    # Liste des fichiers SQL √† ex√©cuter
    sql_files = [
        ("final_daily_summary.sql", "daily_summary", "jours"),
        ("final_zone_analysis.sql", "zone_analysis", "zones"),
        ("final_hourly_patterns.sql", "hourly_patterns", "heures")
    ]
    
    for sql_file, table_name, unit in sql_files:
        # Lire et ex√©cuter le fichier SQL
        sql_path = Path(f"SQL/dbt/{sql_file}")
        sql_content = sql_path.read_text()
        cursor.execute(sql_content)
        
        # Compter les r√©sultats
        cursor.execute(f"SELECT COUNT(*) FROM FINAL.{table_name}")
        count = cursor.fetchone()[0]
        logger.success(f"‚úÖ FINAL.{table_name} cr√©√©e: {count} {unit}")

def main():
    logger.info("üîÑ √âtape 1.4 : Transformations de Base")
    
    # Connexion Snowflake
    conn = snowflake.connector.connect(
        account=os.getenv("SNOWFLAKE_ACCOUNT"),
        user=os.getenv("SNOWFLAKE_USER"),
        password=os.getenv("SNOWFLAKE_PASSWORD"),
        warehouse="NYC_TAXI_WH",
        database="NYC_TAXI_DB",
        role="NYCTRANSFORM"
    )
    
    # Cr√©er les tables selon le brief
    clean_count = create_staging_clean_trips(conn)
    create_final_tables(conn)
    
    conn.close()
    
    logger.success("‚úÖ Transformations termin√©es - Architecture RAW ‚Üí STAGING ‚Üí FINAL compl√®te!")

if __name__ == "__main__":
    main()